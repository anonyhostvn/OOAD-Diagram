@startuml deleteComment

class DeleteCommentForm {
    - token: string
    - comment_id: bigint

    + delete_comment(token, comment_id)
}

class ICommentForm <<interface>> {
    + delete_comment(token, comment_id)
}

class CommentController {
    + delete_comment(token, comment_id)
}

class ClassroomMember {
    - id: bigint
    - user_id: bigint
    - classroom_id: bigint
    - created_at: datetime

    + get_id(): bigint
    + get_user_id(): bigint
    + set_user_id(bigint)
    + get_classroom_id(): bigint
    + set_classroom_id(bigint)
    + get_created_at(): datetime
    + get_updated_at(): datetime
}

class IClassroomMemberDB <<interface>> {
    + create(classroom_id, user_id): void
    + read(classroom_id)
    + read(user_id)
    + read(classroom_member_id)
    + read(classroom_id, user_id)
    + update_rollcall(classroom_member_id, created_at, is_presented)
    + update_bonus_point(classroom_member_id, created_at, point)
    + update_score(classroom_member_id, created_at, test_title, score)
    + delete(classroom_id, user_id)
    + get_user(classroom_member)
    + get_classroom(classroom_member)
}


class Comment {
    - id: bigint
    - topic_id: bigint
    - posted_by: bigint
    - comment: string
    - has_resource: bool
    - resource_id: bigint
    - created_at: datetime
    - updated_at: datetime

    + create(topic_id, posted_by, content, resource)
    + read(topic_id)
    + read(posted_by)
    + read(comment_id)
    + delete(comment_id)
}

class ICommentDB <<interface>> {
    + delete(comment_id)
}

hide DeleteCommentForm circle
hide ICommentForm <<interface>> circle
hide CommentController circle
hide IClassroomMemberDB <<interface>> circle
hide ClassroomMember circle
hide ICommentDB <<interface>> circle
hide Comment circle 


ICommentForm .down.> DeleteCommentForm
IClassroomMemberDB .down.> ClassroomMember
ICommentDB .down.> Comment
ICommentForm "1"-left-"1" CommentController
CommentController "1"-left-"1" IClassroomMemberDB
CommentController "1"-left-"1" ICommentDB


@enduml
