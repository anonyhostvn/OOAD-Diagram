@startuml addStudent

class UpdateBonusPointForm {
    - classroom_id: bigint
    - token: string
    - bonus_point: bigint

    + update_bonus_point(token, classroom_id, bonus_point)
}

class IStudentForm <<interface>> {
    + update_bonus_point(token, classroom_id, bonus_point)
}

class StudentController {
    + view_profile(token, classroom_id)
}

class ClassroomMember {
    - id: bigint
    - user_id: bigint
    - classroom_id: bigint
    - created_at: datetime

    + create(classroom_id, user_id): void
    + read(classroom_id)
    + read(user_id)
    + read(classroom_member_id)
    + read(classroom_id, user_id)
    + update_rollcall(classroom_member_id, created_at, is_presented)
    + update_bonus_point(classroom_member_id, created_at, point)
    + update_score(classroom_member_id, created_at, test_title, score)
    + delete(classroom_id, user_id)
    + get_user(classroom_member)
    + get_classroom(classroom_member)
}

class IClassroomMemberDB <<interface>> {
    + read(classroom_id, user_id)
}


class BonusPoint {
    - id: bigint
    - classroom_member_id: bigint
    - date: date
    - point: int
    - created_at: datetime
    - updated_at: datetime

    + create(classroom_member_id, date, point)
    + read(classroom_member_id)
    + read(classroom_member_id, bonus_point_id)
    + delete(classroom_member_id, bonus_point_id)
}

class IBonusPointDB <<interface>> {
    + create(classroom_member_id, date, point)
}

hide UpdateBonusPointForm circle
hide IStudentForm <<interface>> circle
hide StudentController circle
hide IClassroomMemberDB <<interface>> circle
hide ClassroomMember circle
hide IBonusPointDB <<interface>> circle
hide BonusPoint circle 


IStudentForm .down.> UpdateBonusPointForm
IClassroomMemberDB .down.> ClassroomMember
IBonusPointDB .down.> BonusPoint
IStudentForm "1"-left-"1" StudentController
StudentController "1"-left-"1" IClassroomMemberDB
StudentController "1"-left-"1" IBonusPointDB


@enduml
